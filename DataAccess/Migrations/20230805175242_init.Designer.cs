// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230805175242_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseName = "Math",
                            CreatedDate = new DateTime(2023, 8, 5, 20, 52, 42, 542, DateTimeKind.Local).AddTicks(2089)
                        });
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 5, 20, 52, 42, 542, DateTimeKind.Local).AddTicks(2254),
                            DepartmentName = "Computer Science"
                        });
                });

            modelBuilder.Entity("Core.Entities.Identity.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Standart"
                        });
                });

            modelBuilder.Entity("Core.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 5, 20, 52, 42, 542, DateTimeKind.Local).AddTicks(3495),
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            PasswordHash = new byte[] { 145, 50, 72, 228, 99, 55, 189, 17, 222, 199, 51, 212, 179, 166, 60, 112, 161, 246, 33, 247, 130, 245, 189, 9, 173, 74, 70, 22, 11, 163, 32, 246, 90, 93, 31, 85, 229, 221, 241, 53, 63, 196, 211, 0, 117, 103, 104, 96, 217, 40, 240, 198, 110, 29, 239, 230, 145, 238, 59, 86, 223, 102, 16, 232 },
                            PasswordSalt = new byte[] { 28, 155, 44, 117, 98, 140, 74, 76, 182, 126, 203, 171, 72, 178, 157, 203, 132, 121, 185, 214, 216, 35, 19, 39, 252, 185, 139, 53, 201, 210, 65, 25, 77, 157, 28, 23, 76, 82, 184, 206, 224, 228, 210, 152, 192, 238, 151, 68, 194, 252, 125, 202, 130, 225, 242, 243, 131, 181, 221, 19, 205, 196, 163, 248, 89, 184, 254, 183, 11, 131, 169, 222, 224, 172, 65, 126, 19, 179, 135, 126, 41, 11, 231, 172, 89, 49, 159, 240, 150, 128, 222, 120, 218, 70, 83, 224, 214, 57, 106, 232, 108, 26, 122, 69, 8, 35, 66, 222, 90, 50, 3, 251, 68, 157, 59, 20, 86, 159, 59, 173, 109, 196, 169, 72, 181, 225, 219, 162 },
                            Status = true,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 5, 20, 52, 42, 542, DateTimeKind.Local).AddTicks(3505),
                            Email = "standart@gmail.com",
                            FirstName = "standart",
                            PasswordHash = new byte[] { 207, 141, 197, 159, 155, 29, 8, 10, 7, 248, 200, 132, 145, 24, 225, 144, 119, 35, 164, 97, 82, 33, 201, 38, 109, 92, 141, 173, 100, 21, 200, 99, 89, 25, 173, 164, 159, 77, 110, 152, 215, 35, 118, 166, 235, 210, 214, 138, 140, 179, 20, 96, 107, 190, 193, 55, 244, 16, 115, 172, 134, 85, 45, 44 },
                            PasswordSalt = new byte[] { 28, 155, 44, 117, 98, 140, 74, 76, 182, 126, 203, 171, 72, 178, 157, 203, 132, 121, 185, 214, 216, 35, 19, 39, 252, 185, 139, 53, 201, 210, 65, 25, 77, 157, 28, 23, 76, 82, 184, 206, 224, 228, 210, 152, 192, 238, 151, 68, 194, 252, 125, 202, 130, 225, 242, 243, 131, 181, 221, 19, 205, 196, 163, 248, 89, 184, 254, 183, 11, 131, 169, 222, 224, 172, 65, 126, 19, 179, 135, 126, 41, 11, 231, 172, 89, 49, 159, 240, 150, 128, 222, 120, 218, 70, 83, 224, 214, 57, 106, 232, 108, 26, 122, 69, 8, 35, 66, 222, 90, 50, 3, 251, 68, 157, 59, 20, 86, 159, 59, 173, 109, 196, 169, 72, 181, 225, 219, 162 },
                            Status = true,
                            Username = "standart"
                        });
                });

            modelBuilder.Entity("Core.Entities.Identity.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 5, 20, 52, 42, 542, DateTimeKind.Local).AddTicks(2695),
                            OperationClaimId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 5, 20, 52, 42, 542, DateTimeKind.Local).AddTicks(2696),
                            OperationClaimId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.Relationships.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CourseId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 24,
                            CreatedDate = new DateTime(2023, 8, 5, 20, 52, 42, 542, DateTimeKind.Local).AddTicks(2600),
                            DepartmentId = 1,
                            Name = "Oğuzhan"
                        });
                });

            modelBuilder.Entity("Core.Entities.Relationships.StudentCourse", b =>
                {
                    b.HasOne("Core.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.HasOne("Core.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Core.Entities.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
